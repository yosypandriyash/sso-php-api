<?php namespace App\Commands\Models;

use CodeIgniter\CLI\BaseCommand;
use CodeIgniter\CLI\CLI;
use CodeIgniter\Model;

class GenerateModels extends BaseCommand
{
    /*
     *  @todo: Analyze each existing model and keep model methods if user wants and isset config specification for it, dont overwrite if exists (prevent method getters/setters conflicts)
     * */

    /**
     * Command grouping.
     *
     * @var string
     */
    protected $group = 'Models';

    /**
     * The Command's name
     *
     * @var string
     */
    protected $name = 'models:generate';

    /**
     * the Command's short description
     *
     * @var string
     */
    protected $description = 'Generate models for all database tables';

    /**
     * the Command's usage
     *
     * @var string
     */
    protected $usage = 'models:generate [base-model]';

    /**
     * the Command's Arguments
     *
     * @var array
     */
    protected $arguments = [];


    private $defaultOptions = [
        'cleanOnly' => false, //Just delete existing models files
        'templates' => [
            'baseModel' => 'base_model.tpl.php',
            'modelMapper' => 'model_mapper.tpl.php',
            'parentModel' => 'parent_model.tpl.php',
            'childModel' => 'child_model.tpl.php',
        ],
        'files' => [
            'modelMapper' => 'modelsMapper.php',
            'baseModel' => 'BaseModel.php'
        ],
        'keepOnClear' => [
            'base' => ['BaseModel.php'], // Files you want to keep in App/Models/Base/
            'default' => ['*'] // Files you want to keep in App/Models/ '*' means keep all files
        ],
        'overwriteBaseModel' => false, // Overwrite App/Models/Base/BaseModel.php if exists (restore and remove all user custom methods)
        'path' => [ // Relative Path starting by App/Models/
            'base' => 'Base/',
            'default' => ''
        ],
        'namespace' => 'App\Models', // Just for final Model, Base Models namespace will be auto-generated by each self path config
        'extension' => [ // File extension (not .php)
            'base' => 'BaseModel', // (UserBaseModel.PHP)
            'default' => 'Model' // (UserModel.php)
        ],
        'use' => [
            'base' => [],
            'default' => [],
        ], // Use classes definition
        'generatedModelExtendsFrom' => 'BaseModel', // Add extends property for each auto generated base-model class file
        'defaultReturnType' => 'array', // Default return type (array /|\ object)
        'defaultUseSoftDeletes' => 'true', // Use soft deletes when use db->delete()
        'injectForeignTablesDependencies' => false,
        'useTimestamps' => true, // Use timestamps
        'createdField' => 'created_at', //
        'updatedField' => 'updated_at', //
        'deletedField' => 'deleted_at' //
    ];

    private $model;
    /*
     * Creates a model file for each table in current database.
     * @param array $params
     */
    public function run(array $params = [])
    {
        $this->model = new Model();

        $databaseConfig = config('Database')->default;
        $modelsPath = config('Paths')->appDirectory . '/Models';

        // 1 Get current database and check connection
        $database = $databaseConfig['database'];
        $databaseHost = $databaseConfig['hostname'];
        $databaseInfo = '[' . $databaseHost . '].[' . $database . ']';
        $defaultModelsMapper = [];

        $baseModelPath = $this->removePathParentDirs(str_replace('\\', '/', $modelsPath . '/'));

        // Calculate file paths and create paths if not exists
        $baseModelFilesLocation = $baseModelPath . $this->defaultOptions['path']['base'];
        $defaultModelFilesLocation = $baseModelPath . $this->defaultOptions['path']['default'];

        if (!file_exists($defaultModelFilesLocation)) {
            mkdir($defaultModelFilesLocation);
        }

        if (!file_exists($baseModelFilesLocation)) {
            mkdir($baseModelFilesLocation);
        }

        // Cleaning code zone
        // Delete or keep files before generate models
        if (isset($this->defaultOptions['keepOnClear'])) {

            CLI::newLine();
            CLI::write(CLI::color('Cleaning needless model files:', 'green'));
            $keepFilesOnClear = $this->defaultOptions['keepOnClear'];

            // Check for kept base-files
            if (isset($keepFilesOnClear['base'])) { // Files you want to keep in Models/Base path (empty = any, * = all, or file name for each file you want to keep)
                $filesToKeep = $keepFilesOnClear['base'];
                $this->unlinkNeedlessFiles($baseModelFilesLocation, $filesToKeep);
            }

            if (isset($keepFilesOnClear['default'])) { // Files you want to keep in Models/Base path (empty = any, * = all, or file name for each file you want to keep)
                $filesToKeep = $keepFilesOnClear['default'];
                $this->unlinkNeedlessFiles($defaultModelFilesLocation, $filesToKeep);
            }
        }

        // If command launched just for clean current models files
        if ($this->defaultOptions['cleanOnly'] === true) {
            return;
        }

        // 2 Get database tables
        CLI::newLine();
        CLI::write(CLI::color('Selected database: (default) [' . $databaseHost . '].[' . $database . ']', 'green'));

        $databaseTables = $this->getDatabaseTables();
        $databaseTablesRelations = $this->processTablesForeignKeys($this->getDatabaseTablesRelations($database));
        $tables = [];

        // Sanitize sql result and save tables names
        foreach ($databaseTables as $item) {
           if (is_array($item)) {
               foreach ($item as $tableName) {
                   array_push($tables, $tableName);
               }
           }
        }

        // Do action:
        foreach ($tables as $tableName) {

            $tableClassModel = $tableName;
            $tableColumns = $this->getTableColumns($tableClassModel);
            $tableForeignRelations = isset($databaseTablesRelations[$tableName]) ? $databaseTablesRelations[$tableName] : [];

            $baseModelClassName = $this->generateClassName($tableName, $this->defaultOptions['extension']['base']);
            $defaultModelClassName = $this->generateClassName($tableName, $this->defaultOptions['extension']['default']);

            // Add .php extension
            $baseModelFileName = $baseModelClassName . '.php';
            $modelFileName = $defaultModelClassName . '.php';

            $baseModelFileLocation = $baseModelFilesLocation . $baseModelFileName;
            $modelFileLocation = $defaultModelFilesLocation . $modelFileName;

            $defaultModelsMapper[$defaultModelClassName] = $this->calculateNamespaceByPath($this->defaultOptions['path']['default']) . '\\' . $defaultModelClassName;

            CLI::write(CLI::color('', 'green'));
            $outputText = $databaseInfo . '.[' . $tableClassModel . '] Files:';
            CLI::write(CLI::color($outputText, 'green'));

            /** Model Final Child class */
            if (file_exists($modelFileLocation)) {

                // Prevent overwriting existing file
                CLI::write(CLI::color('File ' . $modelFileLocation . ' already exists.', 'green'));

            } else {

                $fileParseOptions = [
                    '[MODEL_FILE_OPEN_CLOSURE]' => $this->generateClassFileOpener(),
                    '[MODEL_NAMESPACE]' => $this->generateClassNamespace($this->calculateNamespaceByPath($this->defaultOptions['path']['default'])),
                    '[MODEL_USE]' => 'use ' . $this->calculateNamespaceByPath($this->defaultOptions['path']['base']) . '\\' . $baseModelClassName . ';' . PHP_EOL,
                    '[MODEL_USES]' => $this->generateClassUseClosures($this->defaultOptions['use']['default']),
                    '[MODEL_CLASS_OPEN_CLOSURE]' => $this->generateClassOpenClosure($defaultModelClassName, $baseModelClassName),
                    '[MODEL_CLASS_CLOSE_CLOSURE]' => $this->generateClassCloseClosure(),
                ];

                $this->parseTemplate(
                    $modelFileLocation,
                    __DIR__ . '\\Views\\' . $this->defaultOptions['templates']['childModel'],
                    $fileParseOptions
                );

                CLI::write(CLI::color('*** Created file: ' . $modelFileLocation . '.', 'green'));
            }

            // BaseModel generator:
            /**
             * Check if current table baseModel class exist and create it if not...
             */
            if (file_exists($baseModelFileLocation)) {
                // prevent overwrite existing files
                CLI::write(CLI::color('File ' . $baseModelFileLocation . ' already exists.', 'green'));
                continue;
            }

            $tablePrimaryKey = '';

            foreach ($tableColumns as $key => $tableColumn) {
                //Camelize each tableColumn property and save it
                $tableColumns[$key]['camelCasePropertyName'] = $this->toLowerCamelCase($tableColumn['Field']);

                if ($tableColumn['Key'] === 'PRI') {
                    // Check if current $tableColumn is PK
                    $tablePrimaryKey = $tableColumn['Field'];
                }
            }

            $modelGetters = '';
            $modelSetters = '';
            $modelValidators = '';

            /**
             * Print getters, setters and validators
             */
            foreach ($tableColumns as $tableColumn) {
                $modelGetters .= $this->generateGetter($tableColumn['camelCasePropertyName']);
                $modelSetters .= $this->generateSetter($tableColumn['camelCasePropertyName']);
                $modelValidators .= $this->generateValidator($tableColumn['camelCasePropertyName']);
            }

            $fileParseOptions = [
                '[MODEL_FILE_OPEN_CLOSURE]' => $this->generateClassFileOpener(),
                '[MODEL_NAMESPACE]' => $this->generateClassNamespace($this->calculateNamespaceByPath($this->defaultOptions['path']['base'])),
                '[MODEL_USE]' => $this->generateClassUseClosures($this->defaultOptions['use']['base']),
                '[MODEL_CLASS_OPEN_CLOSURE]' => $this->generateClassOpenClosure($baseModelClassName, $this->defaultOptions['generatedModelExtendsFrom']),
                '[MODEL_FILE_COMMENTS]' => $this->generateFileComments($defaultModelClassName),
                '[MODEL_BASE_PROPERTIES]' => $this->generateModelBaseProperties($tableName, $tablePrimaryKey, $tableColumns),
                '[MODEL_PROPERTIES]' => $this->generateModelProperties($tableColumns),
                '[MODEL_TABLE_MAPPER]' => $this->generateTableMapper($tableColumns),
                '[MODEL_TABLE_FOREIGN_RELATIONS]' => $this->generateTableForeignRelations($tableForeignRelations),
                '[MODEL_TABLE_VALIDATORS]' => $this->generateTableValidators($tableColumns),
                '[MODEL_PRIMARY_KEY_GETTER]' => $this->generatePrimaryKeyGetter($this->toLowerCamelCase($tablePrimaryKey)),
                '[MODEL_GETTERS]' => $modelGetters,
                '[MODEL_SETTERS]' => $modelSetters,
                '[MODEL_VALIDATORS]' => $modelValidators,
                '[MODEL_CLASS_CLOSE_CLOSURE]' => $this->generateClassCloseClosure()
            ];

            $this->parseTemplate(
                $baseModelFileLocation,
                __DIR__ . '\\Views\\' . $this->defaultOptions['templates']['parentModel'],
                $fileParseOptions
            );

            $outputText = '*** Created file: ' . $baseModelFileLocation;
            CLI::write(CLI::color($outputText, 'green'));
        }

        CLI::write(CLI::color('Models generated successfully', 'green'));
        CLI::write(CLI::color('', 'green'));

        /**
         * BaseModel file create
         */
        $baseModelFileName = $this->defaultOptions['files']['baseModel'];
        $baseModelFilePath = $baseModelFilesLocation . $baseModelFileName;

        if (!file_exists($baseModelFilePath)) {
            $this->parseTemplate(
                $baseModelFilePath,
                $templateFilePath = __DIR__ . '\\Views\\' . $this->defaultOptions['templates']['baseModel'],
                ['[PHP_OPEN]' => '<?php']
            );

            CLI::write(CLI::color('BaseModel.php file generated successfully', 'green'));
        } else {
            CLI::write(CLI::color('BaseModel.php file already exists', 'green'));
        }

        /**
        * Model mapper index-keys generator
        */
        $modelsMapperFileName = $this->defaultOptions['files']['modelMapper'];
        $modelsMapperFilePath = $baseModelFilesLocation . $modelsMapperFileName;

        $modelMapperContentOptions = [
            '[MODEL_MAPPER_FILE_OPEN_CLOSURE]' => $this->generateClassFileOpener(),
            '[MODEL_MAPPER_CONTENT]' => $this->generateModelMapperContent($defaultModelsMapper)
        ];

        $this->parseTemplate(
            $modelsMapperFilePath,
            $templateFilePath = __DIR__ . '\\Views\\' . $this->defaultOptions['templates']['modelMapper'],
            $modelMapperContentOptions
        );

        CLI::write(CLI::color('Models mapper generated successfully in ' . $modelsMapperFilePath, 'green'));

    }

    private function parseTemplate($fileName, $template, $parseOptions)
    {
        copy($template, $fileName);

        if (file_exists($fileName)) {
            file_put_contents(
                $fileName,
                str_replace(
                    array_keys($parseOptions),
                    array_values($parseOptions),
                    file_get_contents($fileName)
                )
            );
        }
    }

    private function generateMarkedText($length = 0, $char = '_')
    {
        $output = '';

        for ($i = 0; $i < $length; $i++) {
            $output .= $char;
        }

        return $output;
    }

    private function calculateNamespaceByPath($relativePath)
    {
        // Remove the last / char if exists
        if ($this->wordEdsWith($relativePath, '/')) {
            $relativePath = substr($relativePath, 0, strlen($relativePath) - 1);
        }

        return $this->defaultOptions['namespace'] . (strlen($relativePath) > 0 ? '\\' : '') . $relativePath;
    }

    private function removePathParentDirs($fileLocation)
    {
        $fileLocationArray = explode('/', $fileLocation);

        $index = 0;
        foreach ($fileLocationArray as $key => $path) {
            if ($path === '..') {
                $index = $key;
            }
        }

        $previousPathIndex = $index - 1;
        if ($previousPathIndex > (-1)) {
            unset($fileLocationArray[$index]); // Remove '/..' path
            unset($fileLocationArray[$previousPathIndex]); // Remove the '/pathName' before '/..' path
        }

        return implode('/', $fileLocationArray);
    }

    private function unlinkNeedlessFiles($baseModelFilesLocation, $filesToKeep)
    {
        // Check first if user want to keep all existing files:
        if (!in_array('*', $filesToKeep)) {

            // Get files in specified path
            $filesInPath = array_diff(scandir($baseModelFilesLocation), ['..', '.']);

            foreach ($filesInPath as $file) {
                if (!in_array($file, $filesToKeep) && stripos($file, '.php')) {

                    // Check for each file if not in keep-files array and unlink it if has .php extension...
                    $fileLocation = $baseModelFilesLocation . $file;

                    // Unlink / delete file /_!_\
                    $output = 'Deleting file ' . $fileLocation . '... ' ;
                    $output .= unlink($fileLocation) ? ' Done!' : ' Error';

                    CLI::write(CLI::color($output, 'green'));
                }
            }
        }
    }

    private function createDir($path)
    {
        $full = '';
        $dirsArray = explode(DIRECTORY_SEPARATOR, $path);

        foreach ($dirsArray as $dir) {
            if ($full === '') {
                continue;
            }

            $full .= DIRECTORY_SEPARATOR . $dir;
            try {
                if (!file_exists($full)) {
                    mkdir($full);
                    echo 'created path ' . $full . PHP_EOL;
                }
            } catch (\Exception $exception) {
                die($exception->getMessage());
            }

        }

        return true;
    }

    private function printTab($length = 1)
    {
        $res = '';

        for($i = 0; $i < $length; $i++) {
            $res .= chr(9);
        }

        return $res;
    }

    private function getDatabaseTables()
    {
        return $this->model->db->query('show tables')->getResult('array');
    }

    private function getDatabaseTablesRelations($databaseName)
    {
        $query = '
            SELECT
                TABLE_NAME,
                COLUMN_NAME,
                CONSTRAINT_NAME,
                REFERENCED_TABLE_NAME,
                REFERENCED_COLUMN_NAME
            FROM
                INFORMATION_SCHEMA.KEY_COLUMN_USAGE
            WHERE
                REFERENCED_TABLE_SCHEMA = \'' . $databaseName . '\'';
        return $this->model->db->query($query)->getResult('array');
    }

    private function processTablesForeignKeys($tableRelations)
    {
        $result = [];
        foreach ($tableRelations as $tableRelation) {

            $tableName = $tableRelation['TABLE_NAME'];
            $columnName = $tableRelation['COLUMN_NAME'];
            $referencedTableName = $tableRelation['REFERENCED_TABLE_NAME'];
            $referencedColumnName = $tableRelation['REFERENCED_COLUMN_NAME'];

            if (!isset($result[$tableName])) {
                $result[$tableName] = [];
            }

            $modelName = $this->generateClassName($referencedTableName, $this->defaultOptions['extension']['default']);
            $result[$tableName][$this->toLowerCamelCase($columnName)] = $modelName . '.' . $referencedColumnName;
        }

        return $result;
    }

    private function generateClassName($tableName, $extension)
    {
        return ucfirst($this->toLowerCamelCase($tableName)) . $extension;
    }

    private function getTableColumns($table)
    {
        return $this->model->db->query('desc ' . $table)->getResult('array');
    }

    private function wordEdsWith( $haystack, $needle ) {
        $length = strlen( $needle );
        if( !$length ) {
            return true;
        }
        return substr( $haystack, -$length ) === $needle;
    }

    private function toLowerCamelCase($string, $delimiter = '_')
    {
        $stringParts = explode($delimiter, $string);

        if (count($stringParts) < 1) {
            return $string;
        }

        $result = strtolower($stringParts[0]);
        unset($stringParts[0]);

        if(count($stringParts) < 1) {
            return $result;
        }

        foreach ($stringParts as $stringPart) {
            $result .= ucfirst($stringPart);
        }

        return $result;
    }

    private function generateClassFileOpener()
    {
        return '<?php' . PHP_EOL;
    }

    private function generateClassNamespace($namespace = '')
    {
        $content = '';
        if (!empty($namespace)) {
            $content .= 'namespace ' . $namespace . ';';
        }
        $content .= PHP_EOL;

        return $content;
    }

    private function generateClassCloseClosure()
    {
        return '}' . PHP_EOL;
    }

    private function generateClassUseClosures($useArray)
    {
        $content = '';

        foreach ($useArray as $defaultOption) {
            if (!empty($defaultOption)) {
                $content .= 'use '. $defaultOption . ';' . PHP_EOL;
            }
        }

        $content .= PHP_EOL;
        return $content;
    }

    private function generateClassOpenClosure($baseModelClassName, $modelClassExtendsFrom = null)
    {
        $content = 'class ' . $baseModelClassName;

        if (isset($modelClassExtendsFrom)) {
            $content .= ' extends ' . $modelClassExtendsFrom;
        }

        $content .= ' {' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generateModelProperties($tableColumns)
    {
        $content = '';

        foreach($tableColumns as $tableColumn) {
            $content .= $this->printTab() . 'protected $' . $tableColumn['camelCasePropertyName'] . ';' . PHP_EOL;
        }

        $content .= PHP_EOL;
        return $content;
    }

    private function generateModelBaseProperties($table, $tablePrimaryKey, $tableColumns)
    {
        $content = $this->printTab() . 'protected $table = \'' . $table . '\';' . PHP_EOL;
        $content .= $this->printTab() . 'protected $primaryKey = \'' . $tablePrimaryKey . '\';' . PHP_EOL;
        $content .= PHP_EOL;
        $content .= $this->printTab() . 'protected $returnType = \'' . $this->defaultOptions['defaultReturnType'] . '\';' . PHP_EOL;
        $content .= $this->printTab() . 'protected $useSoftDeletes = ' . $this->defaultOptions['defaultUseSoftDeletes'] . ';' . PHP_EOL;
        $content .= PHP_EOL;
        $content .= $this->printTab() . 'protected $allowedFields = [' . implode(', ', array_map(function ($value) {return '\'' . $value['Field'] . '\'';}, $tableColumns)) . '];' . PHP_EOL;
        $content .= PHP_EOL;
        $content .= $this->printTab() . 'protected $useTimestamps = ' . (($this->defaultOptions['useTimestamps'] === true) ? 'true' : 'false') . ';' . PHP_EOL;
        $content .= $this->printTab() . 'protected $createdField = \'' . $this->defaultOptions['createdField'] . '\';' . PHP_EOL;
        $content .= $this->printTab() . 'protected $updatedField = \'' . $this->defaultOptions['updatedField'] . '\';' . PHP_EOL;
        $content .= $this->printTab() . 'protected $deletedField = \'' . $this->defaultOptions['deletedField'] . '\';' . PHP_EOL;
        $content .= $this->printTab() . 'protected $injectForeignTablesDependencies = ' . ($this->defaultOptions['injectForeignTablesDependencies'] === true ? 'true' : 'false') . ';' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generateGetter($fieldName)
    {
        $content = $this->printTab() . 'public function get' . ucfirst($fieldName) . '()' . PHP_EOL;
        $content .= $this->printTab() . '{' . PHP_EOL;
        $content .= $this->printTab(2) . 'return $this->' . $fieldName .';' . PHP_EOL;
        $content .= $this->printTab() . '}' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generateSetter($fieldName)
    {
        $content  = $this->printTab() . 'public function set' . ucfirst($fieldName) . '($' . $fieldName . ')' . PHP_EOL;
        $content .= $this->printTab() . '{' . PHP_EOL;
        $content .= $this->printTab(2) . '$this->' . $fieldName . ' = $' . $fieldName . ';' . PHP_EOL;
        $content .= $this->printTab(2) . 'return $this;' . PHP_EOL;
        $content .= $this->printTab() . '}' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generateValidator($fieldName)
    {
        $content  = $this->printTab() . 'public function validate' . ucfirst($fieldName) . '($' . $fieldName . ' = null)' . PHP_EOL;
        $content .= $this->printTab() . '{' . PHP_EOL;
        $content .= $this->printTab(2) . 'return $this->validateField($this->validationRules[\'' . $fieldName . '\'], $' . $fieldName . ');' . PHP_EOL;
        $content .= $this->printTab() . '}' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generatePrimaryKeyGetter($fieldName)
    {
        $content = $this->printTab() . 'public function getPrimaryKeyValue()' . PHP_EOL;
        $content .= $this->printTab() . '{' . PHP_EOL;
        $content .= $this->printTab(2) . 'return $this->' . $fieldName .';' . PHP_EOL;
        $content .= $this->printTab() . '}' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generateTableValidators($tableColumns)
    {
        $content = $this->printTab() . 'protected $validationRules = [' . PHP_EOL;

        foreach ($tableColumns as $key => $tableColumn) {
            $fieldName = $tableColumn['camelCasePropertyName'];
            $type = $tableColumn['Type'];
            $isNull = $tableColumn['Null'] === "YES";
            $keyType = $tableColumn['Key'];
            $default = $tableColumn['Default'];
            $extra = $tableColumn['Extra'];

            $content .= $this->printTab(2) . '\'' . $fieldName . '\' => [' . PHP_EOL;
            $content .= $this->printTab(3) . '\'name\' => "' . $fieldName . '",' . PHP_EOL;
            $content .= $this->printTab(3) . '\'type\' => "' . $type . '",' . PHP_EOL;
            $content .= $this->printTab(3) . '\'is_null\' => ' . ($isNull ? 'true' : 'false') . ',' . PHP_EOL;
            $content .= $this->printTab(3) . '\'key\' => \'' . $keyType . '\',' . PHP_EOL;
            $content .= $this->printTab(3) . '\'default\' => \'' . $default . '\',' . PHP_EOL;
            $content .= $this->printTab(3) . '\'extra\' => \'' . $extra . '\'' . PHP_EOL;
            $content .= $this->printTab(2) . '],' . PHP_EOL;
        }

        $content .= $this->printTab() . '];' . PHP_EOL;
        $content .= $this->printTab() . PHP_EOL;

        return $content;
    }

    private function generateTableMapper($tableColumns)
    {
        $content = $this->printTab() . 'protected $mapper = [' . PHP_EOL;
        foreach ($tableColumns as $tableColumn) {
            $assign = "'" . $tableColumn['camelCasePropertyName'] . "' => '" . $tableColumn['Field'] . "',";
            $content .= $this->printTab(2) . $assign . PHP_EOL;
        }

        $content .= $this->printTab() . '];' . PHP_EOL;
        $content .= PHP_EOL;

        $content .= $this->printTab() . 'public function getMapper($key = null)' . PHP_EOL;
        $content .= $this->printTab() . '{' . PHP_EOL;
        $content .= $this->printTab(2) . 'return isset($key) ? (isset($this->mapper[$key]) ? $this->mapper[$key] : null) : $this->mapper;' . PHP_EOL;
        $content .= $this->printTab() . '}' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generateTableForeignRelations($tableForeignRelations)
    {
        $content = $this->printTab() . 'protected $tableForeignRelations = [' . PHP_EOL;
        foreach ($tableForeignRelations as $key => $tableForeignRelation) {
            $assign = "'" . $key . "' => '" . $tableForeignRelation . "',";
            $content .= $this->printTab(2) . $assign . PHP_EOL;
        }

        $content .= $this->printTab() . '];' . PHP_EOL;
        $content .= PHP_EOL;

        $content .= $this->printTab() . 'public function getTableForeignRelations($key = null)' . PHP_EOL;
        $content .= $this->printTab() . '{' . PHP_EOL;
        $content .= $this->printTab(2) . 'return isset($key) ? (isset($this->tableForeignRelations[$key]) ? $this->tableForeignRelations[$key] : null) : $this->tableForeignRelations;' . PHP_EOL;
        $content .= $this->printTab() . '}' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generateFileComments($className)
    {
        $content = PHP_EOL;
        $content .= $this->printTab() . '// Auto-generated file.' . PHP_EOL;
        $content .= $this->printTab() . '// Please don´t modify this file. ' . PHP_EOL;
        $content .= $this->printTab() . '// All changes will be erased in the next CLI models::generate command launch' . PHP_EOL;
        $content .= $this->printTab() . '// Use App\\Models\\' . $className . '.php file instead to add your custom model methods' . PHP_EOL;
        $content .= PHP_EOL;

        return $content;
    }

    private function generateModelMapperContent($modelMapper)
    {
        $content = 'return [' . PHP_EOL;
        foreach ($modelMapper as $key => $value) {
            $content .= $this->printTab(1) . '\'' . $key . '\' => \'' . $value . '\', ' . PHP_EOL;
        }
        $content .= '];'. PHP_EOL;
        return $content;
    }
}
